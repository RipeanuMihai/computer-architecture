"use strict";(self.webpackChunkcomputer_architecture=self.webpackChunkcomputer_architecture||[]).push([[9226],{2138:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var i=r(8168),t=(r(6540),r(5680));const n={},l="ALU",o={unversionedId:"Evaluare/Test Circuite Combina\u021bionale/ALU/README",id:"Evaluare/Test Circuite Combina\u021bionale/ALU/README",title:"ALU",description:"Implementa\u021bi un ALU.",source:"@site/docs/Evaluare/Test Circuite Combina\u021bionale/ALU/README.md",sourceDirName:"Evaluare/Test Circuite Combina\u021bionale/ALU",slug:"/Evaluare/Test Circuite Combina\u021bionale/ALU/",permalink:"/computer-architecture/Evaluare/Test Circuite Combina\u021bionale/ALU/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"7-LED Segment DIGIT",permalink:"/computer-architecture/Evaluare/Test Circuite Combina\u021bionale/7 LED Segment/"},next:{title:"Test Circuite Secven\u021biale",permalink:"/computer-architecture/Evaluare/Test Circuite Secven\u021biale/"}},u={},p=[],c={toc:p},m="wrapper";function d({components:e,...a}){return(0,t.yg)(m,(0,i.A)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"alu"},"ALU"),(0,t.yg)("p",null,"Implementa\u021bi un ALU."),(0,t.yg)("p",null,"Int\u0103rile ALU sunt:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"i_w_op1 - primul operand (4 bi\u021bi)"),(0,t.yg)("li",{parentName:"ul"},"i_w_op2 - al doilea operand (4 bi\u021bi)"),(0,t.yg)("li",{parentName:"ul"},"i_w_opsel - opera\u021bia selectat\u0103 pentru a fi executat\u0103 de c\u0103tre ALU (2 bi\u021bi)")),(0,t.yg)("p",null,"Ie\u0219irea ALU este:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"o_w_out - rezultatul opera\u021biei \xeentre cei doi operanzi (4 bi\u021bi)")),(0,t.yg)("p",null,'Ap\u0103sa\u021bi butonul "evaluate" din VPL pentru a afla opera\u021bile pe care trebuie sa le implementa\u021bi pentru fiecare valoare a intr\u0103rii i_w_opsel.'),(0,t.yg)("p",null,"Operatiile posibile sunt:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"ADDITION - Adunare \xeentre cei doi operanzi"),(0,t.yg)("li",{parentName:"ul"},"SUBTRACTION - Scaderea celui de al doilea operand din primul operand"),(0,t.yg)("li",{parentName:"ul"},"MULTIPLY - \xcenmul\u021birea celor doi operanzi \u0219i re\u021binerea \xeen rezultat a celor mai pu\u021bi semnificativi 4 bi\u021bi"),(0,t.yg)("li",{parentName:"ul"},"DIVIDE - \xcemp\u0103r\u021birea primului operand de c\u0103tre al doilea operand"),(0,t.yg)("li",{parentName:"ul"},"MODULUS - Restul \xeemp\u0103r\u021birii primului operand de c\u0103tre al doilea operand"),(0,t.yg)("li",{parentName:"ul"},"LEFT_SHIFT - Shiftarea la st\xe2nga a primului operand cu valoarea celui de al doilea operand"),(0,t.yg)("li",{parentName:"ul"},"RIGHT_SHIFT - Shiftarea la dreapta a primului operand cu valoarea celui de al doilea operand"),(0,t.yg)("li",{parentName:"ul"},"ARITHMETIC_RIGHT_SHIFT -Shiftarea aritmetic\u0103 la dreapta a primului operand cu valoarea celui de al doilea operand"),(0,t.yg)("li",{parentName:"ul"},"BITWISE_NAND - \u0218I-NU \xeentre bi\u021bi celor doi operanzi pe acelea\u0219i pozi\u021bii"),(0,t.yg)("li",{parentName:"ul"},"BITWISE_NOR - SAU_NU \xeentre bi\u021bi celor doi operanzi pe acelea\u0219i pozi\u021bii"),(0,t.yg)("li",{parentName:"ul"},"BITWISE_AND - \u0218I \xeentre bi\u021bi celor doi operanzi pe acelea\u0219i pozi\u021bii"),(0,t.yg)("li",{parentName:"ul"},"BITWISE_OR - SAU \xeentre bi\u021bi celor doi operanzi pe acelea\u0219i pozi\u021bii"),(0,t.yg)("li",{parentName:"ul"},"BITWISE_XOR - SAU-EXCLUSIV \xeentre bi\u021bi celor doi operanzi pe acelea\u0219i pozi\u021bii"),(0,t.yg)("li",{parentName:"ul"},"COMPARE_EQUAL - Dac\u0103 cei doi operazi sunt egali rezultatul va avea valoarea 4'd1 astfel 4'd0."),(0,t.yg)("li",{parentName:"ul"},"COMPARE_LESS_THAN - Dac\u0103 primul operand este mai mic ca al doilea operand rezultatul va avea valoarea 4'd1 astfel 4'd0."),(0,t.yg)("li",{parentName:"ul"},"COMPARE_GREATER_THAN - Dac\u0103 primul operand este mai mare ca al doilea operand rezultatul va avea valoarea 4'd1 astfel 4'd0.")))}d.isMDXComponent=!0},5680:(e,a,r)=>{r.d(a,{xA:()=>c,yg:()=>y});var i=r(6540);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function n(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),r.push.apply(r,i)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?n(Object(r),!0).forEach(function(a){t(e,a,r[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))})}return e}function o(e,a){if(null==e)return{};var r,i,t=function(e,a){if(null==e)return{};var r,i,t={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var u=i.createContext({}),p=function(e){var a=i.useContext(u),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},c=function(e){var a=p(e.components);return i.createElement(u.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},s=i.forwardRef(function(e,a){var r=e.components,t=e.mdxType,n=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),s=t,y=m["".concat(u,".").concat(s)]||m[s]||d[s]||n;return r?i.createElement(y,l(l({ref:a},c),{},{components:r})):i.createElement(y,l({ref:a},c))});function y(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var n=r.length,l=new Array(n);l[0]=s;var o={};for(var u in a)hasOwnProperty.call(a,u)&&(o[u]=a[u]);o.originalType=e,o[m]="string"==typeof e?e:t,l[1]=o;for(var p=2;p<n;p++)l[p]=r[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}s.displayName="MDXCreateElement"}}]);